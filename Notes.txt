MAC: Media Access control
	- Permanent
	- Physical
	- Unique 
	- Every network device has a MAC address, assinged by the Machine Manufacturer.
	- used to identify devices and transfer data between them
	- each packet in network has
		- source MAC
		- destination MAC
		
Changing MAC address:
	- increases anonymity  
	- impersonate other devices
		- bypass filters
		- access restricted data
		
Practical:

1. Use 'ifconfig' command to to list all network interfaces on our device and their network properties(including IP and MAC address)
[if command not found use: 'sudo apt-get install net-tools' and try 'ifconfig' again]
	ifconfig

2. Disable the network interface of which you want to change MAC address of:
	ifconfig 'network interface name' down
	
3. We want to modify the option 'ether' which contains the MAC address of the interface:
	ifconfig 'network interface name' hw ether 'new MAC address'
	
4. Enable the interface:
	ifconfig 'network interface name' up
	
5. Check the MAC address again of the network interface using 'ifconfig':
	ifconfig 'network interface name'
	
Example:

1:	ifconfig
2:	ifconfig wlp3s0 down
3:	ifconfig wlp3s0 hw ether 11:22:33:44:55:66
4:	ifconfig wlp3s0 up
5:	ifconfig

We are making a python program that will do all this for us with extra features. For that we want python to execute linux commands and for that we use a module called 'Subprocess'.

Subprocess can execute linux as well as all system commands.
It contains no. of functions which allow us to execute system commands(respective to OS).

Sytnax:
	import subprocess
	subprocess.call("COMMAND", Shell = true) [call function for python2][use run for python3]

We made the program as:

#!/usr/bin/env python

import subprocess

print('\nBelow is the list of Network Interfaces in your device with their properties listed below them: \n')

subprocess.call("ifconfig", shell=True)

interface = input("Enter Network Interface > ")
new_MAC = input(f"\nNew MAC address for {interface} > ")

print(f"\n[+]Changing MAC Adress of {interface} to {new_MAC}")

subprocess.run(f"ifconfig {interface} down", shell=True)
subprocess.run(f"ifconfig {interface} hw ether {new_MAC}", shell=True)
subprocess.run(f"ifconfig {interface} up", shell=True)

check = input("\nTo check the MAC address press c\nTo quit press q\n\n > ")

if check == 'c':
	subprocess.call(f"\nifconfig {interface}", shell=True)
elif check == 'q':
	exit()

After making the program, we realize that the input mechanism is flawd because it can be hijacked with using multiple inputs with ;

For example:

if we input wlan0;ls; in input it will run all these command.

To secure the code we use list in input, like this:

subprocess.run(["ifconfig", interface, "down"])
subprocess.run(["ifconfig", interface, "hw", "ether", new_MAC])
subprocess.run(["ifconfig", interface, "up"])

Now to improve our program further, we cna use 'optparse' module, it allows us to take user input in our code as arguement and use it in our code like this:

python3 MAC_Changer.py -i wlan0 -MAC 00:11:22:33:44:55

To use optparse we will create an object(a new entity named 'parser', datatype: variable) which will store the values returned by a class named 'OptionParser'.

Anything starting with capital letter in python is Class which is like rules or blueprint for the object(here 'parser')

Class : Parent
Object: Child

object inherets the properties of class.

We will tell object(parser) how to look for arguement and handle them

dest stores value of interface



















